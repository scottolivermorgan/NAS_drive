# Playbook to automate the installation of Docker and configure global Docker settings.

- name: Install initial packages
  # Ansible task to ensure essential packages are installed
  become: true
  ansible.builtin.apt:
    update_cache: true  # Update apt cache before installing packages
    cache_valid_time: 3600  # Cache validity time set to 1 hour
    pkg:
      - ca-certificates  # Package for CA certificates
      - curl  # Package for transferring data
      - gnupg  # Package for GNU Privacy Guard

- name: Install docker repo key to apt
  # Ansible task to add Docker repository key to apt
  become: true
  ansible.builtin.apt_key:
    url: https://download.docker.com/linux/debian/gpg  # URL for Docker repo key

- name: Register OS code name
  ansible.builtin.command: lsb_release -sc
  register: os_codename  # Command to get OS codename and register its output
  changed_when: os_codename.rc != 0

- name: Install docker repository to apt
  # Ansible task to add Docker repository to apt sources list
  become: true
  ansible.builtin.apt_repository:
    repo: deb [arch=arm64] https://download.docker.com/linux/debian "{{ os_codename.stdout }}" stable  # Docker repository URL with OS codename
    state: present  # Ensure the repository is present

- name: Install docker packages
  # Ansible task to install Docker packages
  become: true
  ansible.builtin.apt:
    update_cache: true  # Update apt cache before installing packages
    pkg:
      - docker-ce  # Docker Community Edition
      - docker-ce-cli  # Docker CLI
      - containerd.io  # Container runtime
      - docker-buildx-plugin  # Docker Buildx plugin
      - docker-compose-plugin  # Docker Compose plugin

- name: Reboot the machine to make the docker.service start
  # Ansible task to reboot the machine to ensure Docker service starts
  become: true
  ansible.builtin.reboot:

- name: Enable docker.service
  # Ansible task to enable and restart Docker service
  become: true
  ansible.builtin.service:
    name: docker  # Docker service name
    state: restarted  # Restart Docker service if already running
    enabled: true  # Ensure Docker service is enabled on boot

- name: Create "docker" group
  # Ansible task to create "docker" group if not already present
  become: true
  ansible.builtin.group:
    name: docker  # Group name
    state: present  # Ensure group is present

- name: Add user to "docker" group
  # Ansible task to add user to "docker" group
  become: true
  ansible.builtin.user:
    name: "{{ ansible_user }}"  # User to be added to "docker" group
    groups: docker  # Add user to "docker" group
    append: true  # Append user to existing groups
