- name: Install lvm2 package
  become: true
  package:
    name: lvm2
    state: present

- name: Load volumes from config.yml
  set_fact:
    volumes: "{{ lookup('file', 'config.yml') | from_yaml }}"

- name: Run find_device_by_label for each volume
  shell: |
    find_device_by_label() {
      label=$1
      device=$(lsblk -o NAME,LABEL | grep "$label" | awk '{print "/dev/" $1}' | sed 's/└─//g')
      echo $device
    }
    find_device_by_label {{ item }}
  loop: "{{ volumes['volumes'] }}"
  register: device_output

- name: Pair volumes with their corresponding devices
  set_fact:
    paired_volumes_devices: []
  
- name: Add volume-device pairs
  set_fact:
    paired_volumes_devices: "{{ paired_volumes_devices + [{'volume': item.0, 'device': item.1.stdout}] }}"
  loop: "{{ volumes['volumes'] | zip(device_output.results) }}"
  when: item.1.stdout is defined

#- name: Format each device as ext4
#  shell: |
#    sudo mkfs.ext4 {{ item.device }} && sudo e2label {{ item.device }} {{ item.volume }}
#  loop: "{{ paired_volumes_devices }}"
#  when: item.device is defined
#  register: format_output

- name: Inspect the device_output
  debug:
    var: device_output


- name: Run pvcreate on each device
  shell: |
    echo "y" | sudo pvcreate {{ item.stdout }}
  loop: "{{ device_output.results }}"
  when: item.stdout is defined
  register: pvcreate_output

#check with sudo pvs
#  PV         VG Fmt  Attr PSize  PFree 
#  /dev/sda1     lvm2 ---  58.98g 58.98g
#  /dev/sdb1     lvm2 ---  58.59g 58.59g

- name: Gather all device paths from pvcreate output
  set_fact:
    device_paths: "{{ pvcreate_output.results | map(attribute='stdout') | map('regex_search', '/dev/[a-zA-Z0-9]+') | list }}"

- name: Create a volume group on the physical volumes
  shell: "sudo vgcreate my_vg {{ device_paths | join(' ') }}"
  when: device_paths | length > 0
  register: vgcreate_output
#sudo vgs
#  VG    #PV #LV #SN Attr   VSize   VFree  
#  my_vg   2   0   0 wz--n- 117.57g 117.57g


- name: Create logical volume
  shell: "sudo lvcreate -n my_lv -l 100%FREE my_vg"
  register: logical_volume_output

#sudo lvs
#  LV    VG    Attr       LSize   Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert
#  my_lv my_vg -wi-a----- 117.57g   

- name: Format logical volume as ext4
  shell: "sudo mkfs.ext4 /dev/my_vg/my_lv"
  register: logical_volume_output







#- name: Install lvm2 package
#  become: true
#  package:
#    name: lvm2
#    state: present
#
#- name: Load volumes from config.yml
#  set_fact:
#    volumes: "{{ lookup('file', 'config.yml') | from_yaml }}"
#
#- name: Run find_device_by_label for each volume
#  shell: |
#    find_device_by_label() {
#      label=$1
#      device=$(lsblk -o NAME,LABEL | grep "$label" | awk '{print "/dev/" $1}' | sed 's/└─//g')
#      echo $device
#    }
#    find_device_by_label {{ item }}
#  loop: "{{ volumes['volumes'] }}"
#  register: device_output
#
#- name: Pair volumes with their corresponding devices
#  set_fact:
#    paired_volumes_devices: []
#
#- name: Add volume-device pairs
#  set_fact:
#    paired_volumes_devices: "{{ paired_volumes_devices + [{'volume': item.0, 'device': item.1.stdout}] }}"
#  loop: "{{ volumes['volumes'] | zip(device_output.results) }}"
#  when: item.1.stdout is defined
#
#- name: Inspect the device_output
#  debug:
#    var: device_output
#
#- name: Check if pvcreate needs to be run on each device
#  stat:
#    path: "{{ item.stdout }}"
#  register: pv_check
#  loop: "{{ device_output.results }}"
#  when: item.stdout is defined
#
#- name: Run pvcreate on each device if not already a physical volume
#  shell: |
#    echo "y" | sudo pvcreate {{ item.stdout }}
#  loop: "{{ device_output.results }}"
#  when: item.stdout is defined and not pv_check.results[item.loop.index0].stat.exists
#  register: pvcreate_output
#
#- name: Gather all device paths from pvcreate output
#  set_fact:
#    device_paths: "{{ pvcreate_output.results | map(attribute='stdout') | map('regex_search', '/dev/[a-zA-Z0-9]+') | list }}"
#
#- name: Check if volume group exists
#  command: vgs --noheadings -o vg_name
#  register: vg_check
#  failed_when: false
#
#- name: Create a volume group on the physical volumes if it doesn't exist
#  shell: "sudo vgcreate my_vg {{ device_paths | join(' ') }}"
#  when: vg_check.stdout_lines | length == 0 and device_paths | length > 0
#  register: vgcreate_output
#
#- name: Check if logical volume exists
#  command: lvs --noheadings -o lv_name
#  register: lv_check
#  failed_when: false
#
#- name: Create logical volume if it doesn't exist
#  shell: "sudo lvcreate -n my_lv -l 100%FREE my_vg"
#  when: lv_check.stdout_lines | length == 0
#  register: logical_volume_output
#
#- name: Format logical volume as ext4
#  shell: "sudo mkfs.ext4 /dev/my_vg/my_lv"
#  register: logical_volume_output
#  when: lv_check.stdout_lines | length == 0







#- name: Format each device as ext4
#  shell: |
#    sudo mkfs.ext4 {{ item.stdout }} ##&& sudo e2label /dev/sdX1 HD_1
#  loop: "{{ device_output.results }}"
#  when: item.stdout is defined
#  register: format_output

#- name: Reboot the machine 
#  # Ansible task to reboot the machine to ensure Docker service starts
#  become: true
#  ansible.builtin.reboot: