- name: Install lvm2 package
  become: true
  package:
    name: lvm2
    state: present

- name: Load volumes from config.yml
  set_fact:
    volumes: "{{ lookup('file', 'config.yml') | from_yaml }}"

- name: Run find_device_by_label for each volume
  shell: |
    find_device_by_label() {
      label=$1
      device=$(lsblk -o NAME,LABEL | grep "$label" | awk '{print "/dev/" $1}' | sed 's/└─//g')
      echo $device
    }
    find_device_by_label {{ item }}
  loop: "{{ volumes['volumes'] }}"
  register: device_output

- name: Inspect the device_output
  debug:
    var: device_output

- name: Show the device output
  debug:
    var: device_output.results[0]

- name: Run pvcreate on each device
  shell: |
    echo "y" | sudo pvcreate {{ item.stdout }}
  loop: "{{ device_output.results }}"
  when: item.stdout is defined
  register: pvcreate_output

#check with sudo pvs
#  PV         VG Fmt  Attr PSize  PFree 
#  /dev/sda1     lvm2 ---  58.98g 58.98g
#  /dev/sdb1     lvm2 ---  58.59g 58.59g

- name: Gather all device paths from pvcreate output
  set_fact:
    device_paths: "{{ pvcreate_output.results | map(attribute='stdout') | map('regex_search', '/dev/[a-zA-Z0-9]+') | list }}"

- name: Create a volume group on the physical volumes
  shell: "sudo vgcreate my_vg {{ device_paths | join(' ') }}"
  when: device_paths | length > 0
  register: vgcreate_output

#sudo vgs
#  VG    #PV #LV #SN Attr   VSize   VFree  
#  my_vg   2   0   0 wz--n- 117.57g 117.57g






#- name: Format each device as ext4
#  shell: |
#    sudo mkfs.ext4 {{ item.stdout }} ##&& sudo e2label /dev/sdX1 HD_1
#  loop: "{{ device_output.results }}"
#  when: item.stdout is defined
#  register: format_output

#- name: Reboot the machine 
#  # Ansible task to reboot the machine to ensure Docker service starts
#  become: true
#  ansible.builtin.reboot: